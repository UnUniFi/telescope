/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, UpdateParamsMsg, RegisterProviderMsg, UpdateProviderMsg, CreateVerificationMsg, RemoveVerificationMsg, QueryMsg, Addr, Params, ArrayOfProvider, Provider, ArrayOfVerification, Verification } from "./Kyc.types";
export interface KycReadOnlyInterface {
  contractAddress: string;
  params: () => Promise<Params>;
  providers: () => Promise<ArrayOfProvider>;
  verifications: ({
    address
  }: {
    address: string;
  }) => Promise<ArrayOfVerification>;
}
export class KycQueryClient implements KycReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.params = this.params.bind(this);
    this.providers = this.providers.bind(this);
    this.verifications = this.verifications.bind(this);
  }

  params = async (): Promise<Params> => {
    return this.client.queryContractSmart(this.contractAddress, {
      params: {}
    });
  };
  providers = async (): Promise<ArrayOfProvider> => {
    return this.client.queryContractSmart(this.contractAddress, {
      providers: {}
    });
  };
  verifications = async ({
    address
  }: {
    address: string;
  }): Promise<ArrayOfVerification> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verifications: {
        address
      }
    });
  };
}
export interface KycInterface extends KycReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateParams: ({
    authority
  }: {
    authority?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerProvider: ({
    address,
    details,
    identity,
    name,
    securityContact,
    website
  }: {
    address: string;
    details: string;
    identity: string;
    name: string;
    securityContact: string;
    website: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateProvider: ({
    address,
    details,
    id,
    identity,
    name,
    securityContact,
    website
  }: {
    address?: string;
    details?: string;
    id: number;
    identity?: string;
    name?: string;
    securityContact?: string;
    website?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createVerification: ({
    customer,
    providerId
  }: {
    customer: string;
    providerId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeVerification: ({
    customer,
    providerId
  }: {
    customer: string;
    providerId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class KycClient extends KycQueryClient implements KycInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateParams = this.updateParams.bind(this);
    this.registerProvider = this.registerProvider.bind(this);
    this.updateProvider = this.updateProvider.bind(this);
    this.createVerification = this.createVerification.bind(this);
    this.removeVerification = this.removeVerification.bind(this);
  }

  updateParams = async ({
    authority
  }: {
    authority?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_params: {
        authority
      }
    }, fee, memo, _funds);
  };
  registerProvider = async ({
    address,
    details,
    identity,
    name,
    securityContact,
    website
  }: {
    address: string;
    details: string;
    identity: string;
    name: string;
    securityContact: string;
    website: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_provider: {
        address,
        details,
        identity,
        name,
        security_contact: securityContact,
        website
      }
    }, fee, memo, _funds);
  };
  updateProvider = async ({
    address,
    details,
    id,
    identity,
    name,
    securityContact,
    website
  }: {
    address?: string;
    details?: string;
    id: number;
    identity?: string;
    name?: string;
    securityContact?: string;
    website?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_provider: {
        address,
        details,
        id,
        identity,
        name,
        security_contact: securityContact,
        website
      }
    }, fee, memo, _funds);
  };
  createVerification = async ({
    customer,
    providerId
  }: {
    customer: string;
    providerId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_verification: {
        customer,
        provider_id: providerId
      }
    }, fee, memo, _funds);
  };
  removeVerification = async ({
    customer,
    providerId
  }: {
    customer: string;
    providerId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_verification: {
        customer,
        provider_id: providerId
      }
    }, fee, memo, _funds);
  };
}