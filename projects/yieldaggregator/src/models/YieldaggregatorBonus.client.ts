/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Decimal, Uint128, Timestamp, Uint64, UpdateParamsMsg, RegisterBonusWindowMsg, DeleteBonusWindowMsg, VoteMsg, StakeVaultShareMsg, QueryMsg, ArrayOfBonusWindow, BonusWindow, Addr, DistributionAmountResp, Distribution, Coin, Params, ArrayOfVaultShareStaking, VaultShareStaking, ArrayOfVotedVault, VotedVault } from "./YieldaggregatorBonus.types";
export interface YieldaggregatorBonusReadOnlyInterface {
  contractAddress: string;
  params: () => Promise<Params>;
  bonusWindows: () => Promise<ArrayOfBonusWindow>;
  votedVaults: ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }) => Promise<ArrayOfVotedVault>;
  vaultShareStaking: ({
    address,
    bonusWindowId
  }: {
    address: string;
    bonusWindowId: number;
  }) => Promise<ArrayOfVaultShareStaking>;
  distributionAmount: ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }) => Promise<DistributionAmountResp>;
}
export class YieldaggregatorBonusQueryClient implements YieldaggregatorBonusReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.params = this.params.bind(this);
    this.bonusWindows = this.bonusWindows.bind(this);
    this.votedVaults = this.votedVaults.bind(this);
    this.vaultShareStaking = this.vaultShareStaking.bind(this);
    this.distributionAmount = this.distributionAmount.bind(this);
  }

  params = async (): Promise<Params> => {
    return this.client.queryContractSmart(this.contractAddress, {
      params: {}
    });
  };
  bonusWindows = async (): Promise<ArrayOfBonusWindow> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bonus_windows: {}
    });
  };
  votedVaults = async ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }): Promise<ArrayOfVotedVault> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voted_vaults: {
        bonus_window_id: bonusWindowId
      }
    });
  };
  vaultShareStaking = async ({
    address,
    bonusWindowId
  }: {
    address: string;
    bonusWindowId: number;
  }): Promise<ArrayOfVaultShareStaking> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_share_staking: {
        address,
        bonus_window_id: bonusWindowId
      }
    });
  };
  distributionAmount = async ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }): Promise<DistributionAmountResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      distribution_amount: {
        bonus_window_id: bonusWindowId
      }
    });
  };
}
export interface YieldaggregatorBonusInterface extends YieldaggregatorBonusReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateParams: ({
    authority
  }: {
    authority?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerBonusWindow: ({
    aprForWinners,
    budgetForAll,
    denom,
    endAt,
    startAt
  }: {
    aprForWinners: Decimal[];
    budgetForAll: Uint128;
    denom: string;
    endAt: Timestamp;
    startAt: Timestamp;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deleteBonusWindow: ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  vote: ({
    bonusWindowId,
    vaultId
  }: {
    bonusWindowId: number;
    vaultId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stakeVaultShare: ({
    bonusWindowId,
    vaultId
  }: {
    bonusWindowId: number;
    vaultId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class YieldaggregatorBonusClient extends YieldaggregatorBonusQueryClient implements YieldaggregatorBonusInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateParams = this.updateParams.bind(this);
    this.registerBonusWindow = this.registerBonusWindow.bind(this);
    this.deleteBonusWindow = this.deleteBonusWindow.bind(this);
    this.vote = this.vote.bind(this);
    this.stakeVaultShare = this.stakeVaultShare.bind(this);
  }

  updateParams = async ({
    authority
  }: {
    authority?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_params: {
        authority
      }
    }, fee, memo, _funds);
  };
  registerBonusWindow = async ({
    aprForWinners,
    budgetForAll,
    denom,
    endAt,
    startAt
  }: {
    aprForWinners: Decimal[];
    budgetForAll: Uint128;
    denom: string;
    endAt: Timestamp;
    startAt: Timestamp;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_bonus_window: {
        apr_for_winners: aprForWinners,
        budget_for_all: budgetForAll,
        denom,
        end_at: endAt,
        start_at: startAt
      }
    }, fee, memo, _funds);
  };
  deleteBonusWindow = async ({
    bonusWindowId
  }: {
    bonusWindowId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delete_bonus_window: {
        bonus_window_id: bonusWindowId
      }
    }, fee, memo, _funds);
  };
  vote = async ({
    bonusWindowId,
    vaultId
  }: {
    bonusWindowId: number;
    vaultId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      vote: {
        bonus_window_id: bonusWindowId,
        vault_id: vaultId
      }
    }, fee, memo, _funds);
  };
  stakeVaultShare = async ({
    bonusWindowId,
    vaultId
  }: {
    bonusWindowId: number;
    vaultId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake_vault_share: {
        bonus_window_id: bonusWindowId,
        vault_id: vaultId
      }
    }, fee, memo, _funds);
  };
}